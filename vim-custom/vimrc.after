let mapleader = ","
set encoding=utf-8
set fillchars=stl:\ ,stlnc:\ ,vert:\|,fold:-,diff:-
set laststatus=2        " always show statusline
set splitbelow          " new vertical split opens below
set splitright          " new horizontal split opens right
set backspace=indent,eol,start
set autoindent          " copy indent from current line when starting a new line
set autoread            " reloads files that changed outside of vim
set autowrite           " saves modified file if it is lost focus
set clipboard+=unnamed  " you can yank to and paste the selection
set commentstring=\ #\ %s
set isfname+=32
set history=1000        " store lots of :cmdline history
set showcmd             " show incomplete cmds down the bottom
set showmode            " show current mode down the bottom
set linebreak           " wrap lines at convenient points
set pastetoggle=<F5>    " for pasting large chunks of text
set wildmenu            " enable ctrl-n and ctrl-p to scroll thru matches
set formatoptions-=o    " don't continue comments when pushing o/O
set scrolloff=3         " vertical/horizontal scroll off settings
set sidescrolloff=7     " vertical/horizontal scroll off settings
set sidescroll=1        " vertical/horizontal scroll off settings
set t_Co=256            " tell the term has 256 colors
set hidden              " hide buffers when not displayed
set modeline            " for setting file type in file's header
set modelines=5         " for setting file type in file's header
set mouse=a             " for using mouse in terminal (shame...)

" remap space to :
nmap <space> :

" remap j and k to move by lines instead of rows (wrapped rows!)
nnoremap j gj
nnoremap k gk

" This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>

" Alternative using Tab/Shift-Tab (for gvim)
:vnoremap <Tab> >gv
:vnoremap <S-Tab> <gv

if has("autocmd")
  " run rspec for _spec files
  autocmd BufNewFile,BufRead *_spec.rb compiler rspec
  autocmd bufWritePost .vimrc, .vimrc.*, .gvimrc.* source $MYVIMRC
  autocmd BufWritePre *.py,*.js :call <SID>StripTrailingWhitespaces()
endif

" F1 for help
map <F1> <ESC>:exec "help ".expand("<cWORD>")<CR>

" Control-arrow combination for browsing the buffer
map <C-right> <ESC>:bn<CR>
map <C-left> <ESC>:bp<CR>

" open included file in a new buffer
map gf :edit <cfile><CR>

" tabbing between windows with tab key:
nnoremap <Tab> <C-w><C-w>

inoremap <c-j> <ESC>/<+.\{-1,}+><cr>c/+>/e<cr>
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" -------------------------------------------------------------------------- "
" colorscheme
" -------------------------------------------------------------------------- "
syntax enable
colorscheme smyck

" set background=light
" colorscheme solarized
" let g:solarized_visibility ="low"
" let g:solarized_termcolors=256
" let g:solarized_italic=0

" -------------------------------------------------------------------------- "
" folding
" -------------------------------------------------------------------------- "
set foldmethod=syntax   " fold based on indent
set foldnestmax=10      " deepest fold is 10 levels
set nofoldenable        " doesn't fold by default
" folding with return key
nnoremap <return> za
" folding in coffeescript files
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent
" folding in python files
au BufNewFile,BufReadPost *.py setl foldmethod=indent

" -------------------------------------------------------------------------- "
" autoclose
" -------------------------------------------------------------------------- "
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '#{': '}', '|':'|' }
let g:AutoCloseProtectedRegions = ["Character"]

" -------------------------------------------------------------------------- "
" nerdtree options
" -------------------------------------------------------------------------- "
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks=1000
let NERDTreeChDirMode=2
let NERDTreeQuitOnOpen=1
nmap <leader>nt :NERDTreeToggle<cr>

" -------------------------------------------------------------------------- "
" Unimpaired settings
" -------------------------------------------------------------------------- "
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" -------------------------------------------------------------------------- "
" Tabularize settings
" -------------------------------------------------------------------------- "
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

" -------------------------------------------------------------------------- "
" indent guides plugin
" -------------------------------------------------------------------------- "
au VimEnter * :IndentGuidesEnable
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_color_change_percent = 2

if !has("gui")
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=236
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
endif

" -------------------------------------------------------------------------- "
" vimwiki settings
" -------------------------------------------------------------------------- "
let g:vimwiki_list = [{'path': '~/.vim/_vimwiki/', 'path_html': '~/code/work/web/html/vimwiki/'}]
map <Leader>ww <Plug>VimwikiIndex

" -------------------------------------------------------------------------- "
" functions
" -------------------------------------------------------------------------- "
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search
  " history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
     normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

