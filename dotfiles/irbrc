IRB.conf[:PROMPT_MODE] = :SIMPLE
IRB.conf[:AUTO_INDENT] = :TRUE
IRB.conf[:IRB_RC] = proc do |conf|
  leader = " " * conf.irb_name.length
  conf.prompt_i = "#{conf.irb_name} -->: "
  conf.prompt_s = leader + '\-" '
  conf.prompt_c = leader + '\-+" '
  conf.return_format = leader + " ==> %s\n\n"
  puts "Welcome!"
end

# az 'ri' parancs használhatóvá tétele az irb-n belül:
#
def ri(*names)
  system(%{ri #{names.map {|name| name.to_s}.join(" ")}})
end

# prompt-mode
#
# %N Current command.
# %m to_s of the main object (self).
# %M inspect of the main object (self).
# %l Delimiter type.
#   In strings that are continued across a line break, %l will display
#   the type of delimiter used to begin the string,
#   so you’ll know how to end it.
#   The delimiter will be one of ", ', /, ], or `.
# %ni Indent level.
#   The optional number n is used as a width specification to printf,
#   as printf("%nd").
# %nn Current line number (n used as with the indent level).
# %% A literal percent sign.
#
# használata:
#
# IRB.conf[:PROMPT][:MY_PROMPT] = { # name of prompt mode
#   :PROMPT_I => '-->',             # normal prompt
#   :PROMPT_S => '--"',             # prompt for continuing strings
#   :PROMPT_C => '--+',             # prompt for continuing statement
#   :RETURN => " ==>%s\n"           # format to return value
# }

begin
  # load wirble
  # require 'rubygems'
  require 'wirble'

  # start wirble (with color)
  Wirble.init
  Wirble.colorize
rescue LoadError => err
  warn "Couldn't load Wirble: #{err}"
end
