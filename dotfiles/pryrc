# prompt
Pry.config.prompt = proc { |obj, nest_level, _| "#{obj}:#{nest_level} => " }
Pry.config.prompt_name = File.basename(Dir.pwd)

# colortheme
Pry.config.theme = "solarized"

# exceptions
Pry.config.exception_handler = proc do |output, exception, _|
  output.puts "#{exception.class}: #{exception.message}"
  output.puts "from #{exception.backtrace.first}"
end
# debugger commands
Pry.commands.alias_command 'c', 'continue'
Pry.commands.alias_command 's', 'step'
Pry.commands.alias_command 'n', 'next'

# awesome_print
begin
  require 'awesome_print'
  Pry.config.print = proc { |output, value| Pry::Helpers::BaseHelpers.stagger_output("=> #{value.ai}", output) }
rescue LoadError => err
  puts "no awesome_print :("
end

# table_print
begin
  require 'table_print'
rescue LoadError => err
  puts "no table_print :("
end

# handling remote boxes and filesystems
begin
  require 'class_loader'
  require 'vfs'
  require 'vos'
rescue LoadError => err
  puts "no support for remote operations :("
end

# hirb
begin
  require 'hirb'
rescue LoadError
  # Missing goodies, bummer
end

if defined? Hirb
  # Slightly dirty hack to fully support in-session Hirb.disable/enable toggling
  Hirb::View.instance_eval do
    def enable_output_method
      @output_method = true
      @old_print = Pry.config.print
      Pry.config.print = proc do |output, value|
        Hirb::View.view_or_page_output(value) || @old_print.call(output, value)
      end
    end

    def disable_output_method
      Pry.config.print = @old_print
      @output_method = nil
    end
  end

  Hirb.enable
end

# vim: set ft=ruby :
